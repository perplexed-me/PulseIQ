name: CI Build & Test

on:
  push:
    branches: [ userservice/backend ]
  pull_request:
    branches: [ userservice/backend ]

env:
  POSTGRES_DB:                ${{ secrets.POSTGRES_DB }}
  POSTGRES_USER:              ${{ secrets.POSTGRES_USER }}
  POSTGRES_PASSWORD:          ${{ secrets.POSTGRES_PASSWORD }}
  JWT_SECRET:                 ${{ secrets.JWT_SECRET }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: .    # your pom.xml lives at the repo root

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '21'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Start PostgreSQL
        run: |
          docker run -d --name postgres-ci \
            -e POSTGRES_DB="$POSTGRES_DB" \
            -e POSTGRES_USER="$POSTGRES_USER" \
            -e POSTGRES_PASSWORD="$POSTGRES_PASSWORD" \
            -p 5432:5432 \
            postgres:14
          # wait until Postgres ready
          until docker exec postgres-ci pg_isready -U "$POSTGRES_USER"; do sleep 2; done

      - name: Initialize DB schema
        run: |
          docker exec postgres-ci \
            psql -U "$POSTGRES_USER" -d "$POSTGRES_DB" \
            -c "CREATE SCHEMA IF NOT EXISTS pulseiq;"

      - name: Build & test with Maven
        env:
          SPRING_DATASOURCE_URL:      jdbc:postgresql://localhost:5432/${{ env.POSTGRES_DB }}?currentSchema=pulseiq
          SPRING_DATASOURCE_USERNAME: ${{ env.POSTGRES_USER }}
          SPRING_DATASOURCE_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        run: |
          mvn clean verify -B \
            -Dspring.datasource.url=${SPRING_DATASOURCE_URL} \
            -Dspring.datasource.username=${SPRING_DATASOURCE_USERNAME} \
            -Dspring.datasource.password=${SPRING_DATASOURCE_PASSWORD} \
            -Dspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

      - name: Upload JaCoCo coverage report
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: target/site/jacoco/jacoco.xml

      - name: Tear down PostgreSQL
        if: always()
        run: |
          docker stop postgres-ci
          docker rm postgres-ci
