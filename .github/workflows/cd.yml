name: CD Deploy to Docker Hub & Azure

on:
  workflow_run:
    workflows: ["CI Build & Test"]
    types: [completed]
    branches: [main]

jobs:
  build-and-push:
    if: github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata for backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/pulseiq-backend
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract metadata for frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/pulseiq-frontend
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile.production
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VITE_BACKEND_URL=http://${{ secrets.AZURE_SSH_HOST }}:8085
            VITE_FIREBASE_API_KEY=${{ secrets.VITE_FIREBASE_API_KEY }}
            VITE_FIREBASE_AUTH_DOMAIN=${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
            VITE_FIREBASE_PROJECT_ID=${{ secrets.VITE_FIREBASE_PROJECT_ID }}
            VITE_FIREBASE_STORAGE_BUCKET=${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
            VITE_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
            VITE_FIREBASE_APP_ID=${{ secrets.VITE_FIREBASE_APP_ID }}
            VITE_FIREBASE_MEASUREMENT_ID=${{ secrets.VITE_FIREBASE_MEASUREMENT_ID }}

  deploy-to-azure:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Copy deployment files to Azure VM
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.AZURE_SSH_HOST }}
          username: ${{ secrets.AZURE_SSH_USER }}
          key: ${{ secrets.AZURE_SSH_PRIVATE_KEY }}
          source: "docker-compose.azure.yml,backend/init-schema.sql"
          target: "~/pulseiq-app/"
          strip_components: 0

      - name: Deploy to Azure VM
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.AZURE_SSH_HOST }}
          username: ${{ secrets.AZURE_SSH_USER }}
          key: ${{ secrets.AZURE_SSH_PRIVATE_KEY }}
          script: |
            set -e

            # Create application directory
            mkdir -p ~/pulseiq-app
            cd ~/pulseiq-app

            # Create environment file for production
            cat > .env.azure << 'EOF'
            DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            FRONTEND_URL=http://${{ secrets.AZURE_SSH_HOST }}:8080
            BACKEND_URL=http://${{ secrets.AZURE_SSH_HOST }}:8085
            FIREBASE_ENABLED=true
            VITE_FIREBASE_API_KEY=${{ secrets.VITE_FIREBASE_API_KEY }}
            VITE_FIREBASE_AUTH_DOMAIN=${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
            VITE_FIREBASE_PROJECT_ID=${{ secrets.VITE_FIREBASE_PROJECT_ID }}
            VITE_FIREBASE_STORAGE_BUCKET=${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
            VITE_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
            VITE_FIREBASE_APP_ID=${{ secrets.VITE_FIREBASE_APP_ID }}
            VITE_FIREBASE_MEASUREMENT_ID=${{ secrets.VITE_FIREBASE_MEASUREMENT_ID }}
            EOF

            # Create Firebase service account file with proper JSON formatting
            echo "Creating Firebase service account file..."
            cat > firebase-service-account.json << 'FIREBASE_EOF'
            ${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}
            FIREBASE_EOF

            # Validate Firebase JSON file
            echo "=== Validating Firebase Configuration ==="
            if python3 -m json.tool firebase-service-account.json > /dev/null 2>&1; then
              echo "✅ Firebase service account JSON is valid"
              echo "Project ID: $(python3 -c "import json; print(json.load(open('firebase-service-account.json'))['project_id'])" 2>/dev/null || echo 'Not found')"
            else
              echo "❌ Firebase service account JSON is invalid"
              echo "File size: $(wc -c < firebase-service-account.json) bytes"
              echo "First 100 characters:"
              head -c 100 firebase-service-account.json
              exit 1
            fi

            # Move init-schema.sql to the correct location
            if [ -f "backend/init-schema.sql" ]; then
              mv backend/init-schema.sql ./init-schema.sql
              echo "✅ Database schema file prepared"
            else
              echo "❌ Database schema file not found"
              exit 1
            fi

            # Verify environment file was created correctly
            echo "=== Environment Configuration ==="
            echo "Environment file size: $(wc -l < .env.azure) lines"
            echo "Firebase enabled: $(grep FIREBASE_ENABLED .env.azure || echo 'NOT FOUND')"

            # Ensure firewall allows HTTP traffic
            echo "=== Configuring Firewall ==="
            sudo ufw allow 8080/tcp || true
            sudo ufw allow 8085/tcp || true
            sudo ufw status || true

            # Pull latest images
            echo "=== Pulling Latest Images ==="
            docker-compose -f docker-compose.azure.yml --env-file .env.azure pull

            # Stop existing containers gracefully
            echo "=== Stopping Existing Containers ==="
            docker-compose -f docker-compose.azure.yml down --remove-orphans || true

            # Clean up unused resources
            echo "=== Cleaning Up Docker Resources ==="
            docker system prune -f || true

            # Start the application
            echo "=== Starting PulseIQ Application ==="
            docker-compose -f docker-compose.azure.yml --env-file .env.azure up -d

            # Wait for services to be healthy with better error handling
            echo "=== Waiting for Services to Start ==="
            timeout 300 bash -c '
              while true; do
                # Check if all services are running
                running_services=$(docker-compose -f docker-compose.azure.yml ps --services --filter "status=running" | wc -l)
                total_services=$(docker-compose -f docker-compose.azure.yml ps --services | wc -l)
                
                echo "Services running: $running_services/$total_services"
                
                # Check if backend is healthy
                if curl -f http://localhost:8085/actuator/health >/dev/null 2>&1; then
                  echo "✅ Backend is healthy!"
                  break
                fi
                
                echo "Waiting for services to start..."
                docker-compose -f docker-compose.azure.yml logs --tail=5 backend
                sleep 15
              done
            '

            # Show service status
            echo "=== Service Status ==="
            docker-compose -f docker-compose.azure.yml ps

            # Show recent logs for debugging
            echo "=== Recent Application Logs ==="
            echo "Backend logs:"
            docker-compose -f docker-compose.azure.yml logs --tail=30 backend

            echo "Frontend logs:"
            docker-compose -f docker-compose.azure.yml logs --tail=10 frontend

            echo "Database logs:"
            docker-compose -f docker-compose.azure.yml logs --tail=10 db

            # Test connectivity with detailed output
            echo "=== Testing Application Connectivity ==="

            echo "Testing backend health endpoint..."
            if curl -f -s http://localhost:8085/actuator/health; then
              echo "✅ Backend health check passed"
            else
              echo "❌ Backend health check failed"
              docker-compose -f docker-compose.azure.yml logs --tail=20 backend
            fi

            echo "Testing backend Firebase configuration..."
            backend_response=$(curl -s -w "%{http_code}" -o /dev/null http://localhost:8085/api/auth/google-patient 2>/dev/null || echo "000")
            if [ "$backend_response" != "000" ]; then
              echo "✅ Backend Firebase endpoint responding (status: $backend_response)"
            else
              echo "❌ Backend Firebase endpoint not responding"
            fi

            echo "Testing frontend..."
            if curl -f -s http://localhost:8080/ >/dev/null; then
              echo "✅ Frontend is accessible"
            else
              echo "❌ Frontend is not accessible"
              docker-compose -f docker-compose.azure.yml logs --tail=10 frontend
            fi

            # Show network and port information
            echo "=== Network Information ==="
            echo "Active ports:"
            netstat -tlnp | grep -E ':(8080|8085)' || echo "No ports listening on 8080/8085"

            echo "Docker networks:"
            docker network ls | grep pulseiq || echo "No PulseIQ networks found"

            echo "Container networking:"
            docker inspect pulseiq_backend | grep -A 10 NetworkSettings | head -15 || echo "Backend container not found"

            echo "=== Firebase Configuration Check ==="
            echo "Firebase service account file:"
            if [ -f "firebase-service-account.json" ]; then
              echo "File exists: $(wc -c < firebase-service-account.json) bytes"
              if command -v python3 >/dev/null 2>&1; then
                echo "Project ID: $(python3 -c "import json; print(json.load(open('firebase-service-account.json'))['project_id'])" 2>/dev/null || echo 'Could not extract project ID')"
              fi
            else
              echo "Firebase service account file not found"
            fi

            echo "✅ Deployment completed successfully!"
            echo "🌐 Frontend: http://${{ secrets.AZURE_SSH_HOST }}:8080"
            echo "🔧 Backend: http://${{ secrets.AZURE_SSH_HOST }}:8085"
            echo "📊 Health Check: http://${{ secrets.AZURE_SSH_HOST }}:8085/actuator/health"
