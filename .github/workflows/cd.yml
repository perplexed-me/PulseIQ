name: CD Deploy to Azure VM

on:
  workflow_run:
    workflows: ["CI Build & Test"]
    types: [completed]

jobs:
  deploy:
    if: >
      github.event.workflow_run.conclusion == 'success' &&
      (
        github.event.workflow_run.head_branch == 'backend' ||
        github.event.workflow_run.head_branch == 'userservice/backend'
      )
    runs-on: ubuntu-latest

    steps:
      # -- show what triggered us (helpful to keep a record) ----------
      - name: Debug workflow_run context
        run: |
          echo "Deploying commit : ${{ github.event.workflow_run.head_sha }}"
          echo "From branch      : ${{ github.event.workflow_run.head_branch }}"
          echo "Triggering event : ${{ github.event.workflow_run.event }}"

      # -- check out the exact commit CI built ------------------------
      - name: Checkout triggering commit
        uses: actions/checkout@v3
        with:
          repository: ${{ github.event.workflow_run.head_repository.full_name }}
          ref:        ${{ github.event.workflow_run.head_sha }}

      # -- Docker Hub login ------------------------------------------
      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # -- Build & push the image ------------------------------------
      - name: Build & Push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/pulseiq-app:latest .
          docker push   ${{ secrets.DOCKER_USERNAME }}/pulseiq-app:latest

      # -- Prepare SSH key -------------------------------------------
      - name: Install SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AZURE_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Deploy on Azure VM
        uses: appleboy/ssh-action@v1
        with:
          host:     ${{ secrets.AZURE_SSH_HOST }}
          username: ${{ secrets.AZURE_SSH_USER }}
          key:      ${{ secrets.AZURE_SSH_PRIVATE_KEY }}
          envs:     FIREBASE_JSON
        script: |
          set -e

          echo "=== Pull latest image ==="
          docker pull ${{ secrets.DOCKER_USERNAME }}/pulseiq-app:latest

          echo "=== Ensure Postgres is running ==="
          if docker ps -a --format '{{.Names}}' | grep -q '^postgres_db$'; then
            # container exists: start if itâ€™s stopped
            docker start postgres_db || true
          else
            # container missing: create it
            docker run -d --name postgres_db \
              -e POSTGRES_DB=${{ secrets.POSTGRES_DB }} \
              -e POSTGRES_USER=${{ secrets.POSTGRES_USER }} \
              -e POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
              -p 5432:5432 postgres:14
            # create schema the first time
            until docker exec postgres_db pg_isready -U "${{ secrets.POSTGRES_USER }}"; do sleep 2; done
            docker exec postgres_db \
              psql -U "${{ secrets.POSTGRES_USER }}" -d "${{ secrets.POSTGRES_DB }}" \
              -c 'CREATE SCHEMA IF NOT EXISTS pulseiq;'
          fi

          echo "=== Re-create backend container ==="
          docker rm -f pulseiq_backend 2>/dev/null || true                    # remove old one
          docker run -d --name pulseiq_backend --link postgres_db \
            -p 8085:8085 \
            -e FIREBASE_JSON="$FIREBASE_JSON" \
            -e SPRING_DATASOURCE_URL=jdbc:postgresql://postgres_db:5432/${{ secrets.POSTGRES_DB }}?currentSchema=pulseiq \
            -e SPRING_DATASOURCE_USERNAME=${{ secrets.POSTGRES_USER }} \
            -e SPRING_DATASOURCE_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
            -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
            -e APP_CORS_ALLOWED_ORIGINS=${{ secrets.APP_CORS_ALLOWED_ORIGINS }} \
            ${{ secrets.DOCKER_USERNAME }}/pulseiq-app:latest
